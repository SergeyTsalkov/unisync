
rsync --archive --delete --exclude='.git' --exclude='unisync' /Users/sergey/unisync/ sergey@ark:unisync

{
  local: /path/to/stuff
  remote: /path/to/stuff
  username: (required for ssh, ignored for directtls)
  host: [ip]
  port: (defaults to 22 for ssh, required for directtls)
  method: ssh | nativessh | directtls
  prefer: local | remote | newer | older (default: newer)
  cache: filename (default: [name].cache)
}

example:
  unisync ~/localpath user@host:remotepath/
  unisync myhost.json
  unisync -start myhost.json (run in background)
  unisync -stop myhost.json (stop running in background)
  unisync -log myhost.json (show+tail log)
  unisync -stopall
  unisync -status (list jobs running in background)


NEW SETTINGS
remote_binary_path = unisync | ./unisync [only valid for ssh/nativessh]
ssh_path = ssh [only valid for ssh]
ssh_opts = -e none -o BatchMode=yes -o ConnectTimeout=30 -o StrictHostKeyChecking=no [only valid for ssh]



TODO:
  - error handling
    - dump server connection on error, auto reconect and retry
    - handle timeouts: on connect (regardless of method); use PING once a minute to catch disconects at any point
    - client should delete any .unisync-tmp files on abrupt exit, including if user hits Ctrl+C
    - n.Errors channel should be monitored during all phases, including initial sync on client

  - connection methods
    - nativessh method
    - direct / directtls methods
    - use keepalive on every connection method
    
  - test on Windows, OpenBSD, etc
  - client looks for unisync binary in HOMEDIR if it's missing in PATH (implement as remote_binary_path=, which takes multiple options and they'll all be checked)
  - use start/stop/stopall/status/log to manage background workers

  


       



